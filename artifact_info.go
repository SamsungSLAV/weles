// Code generated by go-swagger; DO NOT EDIT.
// NOTE: above is not entirely true. see TODO: below.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package weles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArtifactInfo describes single artifact stored in ArtifactDB.
// swagger:model ArtifactInfo
type ArtifactInfo struct {
	ArtifactDescription

	// path
	Path ArtifactPath `json:"Path,omitempty"`

	// status
	Status ArtifactStatus `json:"Status,omitempty"`

	// is date of creating the artifact.
	// Format: date-time
	Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`
}

// TODO
// current go-swagger generates broken marshalling and unmarshalling:
// https://github.com/go-swagger/go-swagger/issues/1617
// it is commented out as implicit marshalling works fine.

/*
// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ArtifactInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ArtifactDescription
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ArtifactDescription = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ArtifactInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ArtifactDescription)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}
*/

// Validate validates this artifact info
func (m *ArtifactInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ArtifactDescription
	if err := m.ArtifactDescription.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArtifactInfo) validatePath(formats strfmt.Registry) error {

	if swag.IsZero(m.Path) { // not required
		return nil
	}

	if err := m.Path.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Path")
		}
		return err
	}

	return nil
}

func (m *ArtifactInfo) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Status")
		}
		return err
	}

	return nil
}

func (m *ArtifactInfo) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArtifactInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArtifactInfo) UnmarshalBinary(b []byte) error {
	var res ArtifactInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
