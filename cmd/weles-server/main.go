// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package main

import (
	"fmt"
	"os"
	"time"

	loads "github.com/go-openapi/loads"
	flag "github.com/spf13/pflag"

	"github.com/SamsungSLAV/boruta/http/client"
	"github.com/SamsungSLAV/slav/logger"
	"github.com/SamsungSLAV/weles"
	"github.com/SamsungSLAV/weles/artifacts"
	"github.com/SamsungSLAV/weles/controller"
	"github.com/SamsungSLAV/weles/manager"
	"github.com/SamsungSLAV/weles/parser"
	"github.com/SamsungSLAV/weles/server"
	"github.com/SamsungSLAV/weles/server/operations"
)

var (
	borutaAddress            string
	borutaRefreshPeriod      time.Duration
	artifactDBName           string
	artifactDBLocation       string
	artifactDownloadQueueCap int
	activeWorkersCap         int
	notifierChannelCap       int
	version                  bool
	logLevel                 string
)

// This file was generated by the swagger tool.
// Make sure to regenerate server only with the Makefile which has --exclude-main option set.

func exitOnErr(ctx string, err error) {
	if err != nil {
		logger.IncDepth(1).WithError(err).Emergency(ctx)
		os.Exit(1)
	}
}

func main() {
	swaggerSpec, err := loads.Embedded(server.SwaggerJSON, server.FlatSwaggerJSON)
	exitOnErr("Failed to load embedded swagger spec.", err)

	var srv *server.Server // make sure init is called
	var apiDefaults server.APIDefaults

	flag.Int32Var(&apiDefaults.PageLimit, "page-limit", 0, "Default limit of page size returned "+
		"by Weles API. If set to 0 pagination will be turned off")

	flag.StringVar(&borutaAddress, "boruta-address", "http://127.0.0.1:8487",
		"Boruta address. Must contain protocol.")

	flag.DurationVar(&borutaRefreshPeriod, "boruta-refresh-period", 2*time.Second,
		"Boruta refresh period")

	flag.StringVar(&artifactDBName, "db-file", "weles.db",
		"name of *.db file. Should be located in --db-location")

	flag.StringVar(&artifactDBLocation, "db-location", "/tmp/weles/",
		"location of *.db file and place where Weles will store artifacts.")

	//TODO: when cyberdryads or testlab instance will be present, performance tests should be done
	// to set default values of below:
	flag.IntVar(&artifactDownloadQueueCap, "artifact-download-queue-cap", 100,
		"Capacity of artifact download queue")

	flag.IntVar(&activeWorkersCap, "active-workers-cap", 16, "Maximum number of active workers.")

	flag.IntVar(&notifierChannelCap, "notifier-channel-cap", 100, "Notifier channel capacity.")

	flag.BoolVar(&version, "version", false, "Print Weles server version and exit.")

	flag.StringVar(&logLevel, "log-level", "error", "Level of logging. Levels: "+
		"emergency, alert, critical, error, warning, notice, info, debug")

	//TODO: input validation

	flag.Usage = func() {
		_, _ = fmt.Fprint(os.Stderr,
			`Usage: `+os.Args[0]+` [OPTIONS]
Weles is a lightweight testing framework for Boruta, inspired by LAVA.
You can find out more at weles.rtfd.io`+"\n\n"+flag.CommandLine.FlagUsages())
	}
	// parse the CLI flags
	flag.Parse()

	if version {
		fmt.Println("weles version", weles.SrvVersion)
		os.Exit(0)
	}

	logLvl, err := logger.StringToLevel(logLevel)
	exitOnErr("Invalid value of --log-level flag.", err)
	logger.SetThreshold(logLvl)
	logger.Infof("Logging level: %s", logLvl.String())

	var yap parser.Parser
	am, err := artifacts.NewArtifactManager(
		artifactDBName,
		artifactDBLocation,
		notifierChannelCap,
		activeWorkersCap,
		artifactDownloadQueueCap)
	exitOnErr("Failed to initialize ArtifactManager.", err)
	bor := client.NewBorutaClient(borutaAddress)
	djm := manager.NewDryadJobManager(artifactDBLocation)
	jm := controller.NewJobManager(am, &yap, bor, borutaRefreshPeriod, djm)

	api := operations.NewWelesAPI(swaggerSpec)
	// get server with flag values filled out
	srv = server.NewServer(api)

	defer func() {
		if err = srv.Shutdown(); err != nil {
			logger.WithError(err).Error("Failed to shut down server.")
		}
	}()

	apiDefaults.Managers = server.NewManagers(jm, am)

	srv.WelesConfigureAPI(&apiDefaults)
	err = srv.Serve()
	exitOnErr("Failed to serve the API.", err)
}
