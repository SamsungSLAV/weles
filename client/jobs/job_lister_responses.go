// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	weles "github.com/SamsungSLAV/weles"
)

// JobListerReader is a Reader for the JobLister structure.
type JobListerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *JobListerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewJobListerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewJobListerPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewJobListerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewJobListerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewJobListerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewJobListerOK creates a JobListerOK with default headers values
func NewJobListerOK() *JobListerOK {
	return &JobListerOK{}
}

/*JobListerOK handles this case with default header values.

OK
*/
type JobListerOK struct {
	/*URI to request next page of data. Please note that the same body must be used as in initial request.

	 */
	Next string
	/*URI to request previous page of data. Please note that the same body must be used as in initial request.

	 */
	Previous string
	/*count of records currently fulfilling the requested JobFilter. Please note that this value may change when requesting for the same data at a different moment in time.

	 */
	TotalRecords uint64

	Payload []*weles.JobInfo
}

func (o *JobListerOK) Error() string {
	return fmt.Sprintf("[POST /jobs/list][%d] jobListerOK  %+v", 200, o.Payload)
}

func (o *JobListerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Next
	o.Next = response.GetHeader("Next")

	// response header Previous
	o.Previous = response.GetHeader("Previous")

	// response header TotalRecords
	totalRecords, err := swag.ConvertUint64(response.GetHeader("TotalRecords"))
	if err != nil {
		return errors.InvalidType("TotalRecords", "header", "uint64", response.GetHeader("TotalRecords"))
	}
	o.TotalRecords = totalRecords

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJobListerPartialContent creates a JobListerPartialContent with default headers values
func NewJobListerPartialContent() *JobListerPartialContent {
	return &JobListerPartialContent{}
}

/*JobListerPartialContent handles this case with default header values.

Partial Content
*/
type JobListerPartialContent struct {
	/*URI to request next page of data. Please note that the same body must be used as in initial request.

	 */
	Next string
	/*URI to request previous page of data. Please note that the same body must be used as in initial request.

	 */
	Previous string
	/*number of records after current page. Please note that this value may change when requesting for the same data at a different moment in time.

	 */
	RemainingRecords uint64
	/*count of records currently fulfilling requested JobFilter. Please note that this value may change when requesting for the same data at a different moment in time.

	 */
	TotalRecords uint64

	Payload []*weles.JobInfo
}

func (o *JobListerPartialContent) Error() string {
	return fmt.Sprintf("[POST /jobs/list][%d] jobListerPartialContent  %+v", 206, o.Payload)
}

func (o *JobListerPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Next
	o.Next = response.GetHeader("Next")

	// response header Previous
	o.Previous = response.GetHeader("Previous")

	// response header RemainingRecords
	remainingRecords, err := swag.ConvertUint64(response.GetHeader("RemainingRecords"))
	if err != nil {
		return errors.InvalidType("RemainingRecords", "header", "uint64", response.GetHeader("RemainingRecords"))
	}
	o.RemainingRecords = remainingRecords

	// response header TotalRecords
	totalRecords, err := swag.ConvertUint64(response.GetHeader("TotalRecords"))
	if err != nil {
		return errors.InvalidType("TotalRecords", "header", "uint64", response.GetHeader("TotalRecords"))
	}
	o.TotalRecords = totalRecords

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJobListerBadRequest creates a JobListerBadRequest with default headers values
func NewJobListerBadRequest() *JobListerBadRequest {
	return &JobListerBadRequest{}
}

/*JobListerBadRequest handles this case with default header values.

Bad Request
*/
type JobListerBadRequest struct {
	Payload *weles.ErrResponse
}

func (o *JobListerBadRequest) Error() string {
	return fmt.Sprintf("[POST /jobs/list][%d] jobListerBadRequest  %+v", 400, o.Payload)
}

func (o *JobListerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJobListerNotFound creates a JobListerNotFound with default headers values
func NewJobListerNotFound() *JobListerNotFound {
	return &JobListerNotFound{}
}

/*JobListerNotFound handles this case with default header values.

Not Found
*/
type JobListerNotFound struct {
	Payload *weles.ErrResponse
}

func (o *JobListerNotFound) Error() string {
	return fmt.Sprintf("[POST /jobs/list][%d] jobListerNotFound  %+v", 404, o.Payload)
}

func (o *JobListerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJobListerInternalServerError creates a JobListerInternalServerError with default headers values
func NewJobListerInternalServerError() *JobListerInternalServerError {
	return &JobListerInternalServerError{}
}

/*JobListerInternalServerError handles this case with default header values.

Internal Server error
*/
type JobListerInternalServerError struct {
	Payload *weles.ErrResponse
}

func (o *JobListerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /jobs/list][%d] jobListerInternalServerError  %+v", 500, o.Payload)
}

func (o *JobListerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*JobListerBody Data for filtering and sorting Weles Jobs lists.
swagger:model JobListerBody
*/
type JobListerBody struct {

	// filter
	Filter *weles.JobFilter `json:"Filter,omitempty"`

	// sorter
	Sorter *weles.JobSorter `json:"Sorter,omitempty"`
}

// Validate validates this job lister body
func (o *JobListerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSorter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JobListerBody) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(o.Filter) { // not required
		return nil
	}

	if o.Filter != nil {
		if err := o.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobFilterAndSort" + "." + "Filter")
			}
			return err
		}
	}

	return nil
}

func (o *JobListerBody) validateSorter(formats strfmt.Registry) error {

	if swag.IsZero(o.Sorter) { // not required
		return nil
	}

	if o.Sorter != nil {
		if err := o.Sorter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jobFilterAndSort" + "." + "Sorter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *JobListerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JobListerBody) UnmarshalBinary(b []byte) error {
	var res JobListerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
