// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new jobs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jobs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JobCanceler cancels existing job

JobCanceler stops execution of Job identified by JobID.
*/
func (a *Client) JobCanceler(params *JobCancelerParams) (*JobCancelerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobCancelerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobCanceler",
		Method:             "POST",
		PathPattern:        "/jobs/{JobID}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobCancelerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobCancelerNoContent), nil

}

/*
JobCreator adds new job

adds new Job in Weles using recipe passed in YAML format.
*/
func (a *Client) JobCreator(params *JobCreatorParams) (*JobCreatorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobCreatorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobCreator",
		Method:             "POST",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobCreatorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*JobCreatorCreated), nil

}

/*
JobLister lists jobs with filter and sort features

JobLister returns information on filtered Weles Jobs.
*/
func (a *Client) JobLister(params *JobListerParams) (*JobListerOK, *JobListerPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobListerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "JobLister",
		Method:             "POST",
		PathPattern:        "/jobs/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &JobListerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *JobListerOK:
		return value, nil, nil
	case *JobListerPartialContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
