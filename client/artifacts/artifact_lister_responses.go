// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	weles "github.com/SamsungSLAV/weles"
)

// ArtifactListerReader is a Reader for the ArtifactLister structure.
type ArtifactListerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArtifactListerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewArtifactListerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewArtifactListerPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewArtifactListerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewArtifactListerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewArtifactListerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewArtifactListerOK creates a ArtifactListerOK with default headers values
func NewArtifactListerOK() *ArtifactListerOK {
	return &ArtifactListerOK{}
}

/*ArtifactListerOK handles this case with default header values.

OK
*/
type ArtifactListerOK struct {
	/*URI to request next page of data. Please note that the same body must be used as in initial request.

	 */
	Next string
	/*URI to request next page of data. Please note that the same body must be used as in initial request.

	 */
	Previous string
	/*count of records currently fulfilling the requested ArtifactFilter. Please note that this value may change when requesting for the same data at a different moment in time.

	 */
	TotalRecords uint64

	Payload []*weles.ArtifactInfo
}

func (o *ArtifactListerOK) Error() string {
	return fmt.Sprintf("[POST /artifacts/list][%d] artifactListerOK  %+v", 200, o.Payload)
}

func (o *ArtifactListerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Next
	o.Next = response.GetHeader("Next")

	// response header Previous
	o.Previous = response.GetHeader("Previous")

	// response header TotalRecords
	totalRecords, err := swag.ConvertUint64(response.GetHeader("TotalRecords"))
	if err != nil {
		return errors.InvalidType("TotalRecords", "header", "uint64", response.GetHeader("TotalRecords"))
	}
	o.TotalRecords = totalRecords

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactListerPartialContent creates a ArtifactListerPartialContent with default headers values
func NewArtifactListerPartialContent() *ArtifactListerPartialContent {
	return &ArtifactListerPartialContent{}
}

/*ArtifactListerPartialContent handles this case with default header values.

Partial Content
*/
type ArtifactListerPartialContent struct {
	/*URI to request next page of data. Please note that the same body must be used as in initial request.

	 */
	Next string
	/*URI to request next page of data. Please note that the same body must be used as in initial request.

	 */
	Previous string
	/*number of records after current page. Please note that this value may change when requesting for the same data at a different moment in time.

	 */
	RemainingRecords uint64
	/*count of records currently fulfilling the requested ArtifactFilter. Please note that this value may change when requesting for the same data at a different moment in time.

	 */
	TotalRecords uint64

	Payload []*weles.ArtifactInfo
}

func (o *ArtifactListerPartialContent) Error() string {
	return fmt.Sprintf("[POST /artifacts/list][%d] artifactListerPartialContent  %+v", 206, o.Payload)
}

func (o *ArtifactListerPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Next
	o.Next = response.GetHeader("Next")

	// response header Previous
	o.Previous = response.GetHeader("Previous")

	// response header RemainingRecords
	remainingRecords, err := swag.ConvertUint64(response.GetHeader("RemainingRecords"))
	if err != nil {
		return errors.InvalidType("RemainingRecords", "header", "uint64", response.GetHeader("RemainingRecords"))
	}
	o.RemainingRecords = remainingRecords

	// response header TotalRecords
	totalRecords, err := swag.ConvertUint64(response.GetHeader("TotalRecords"))
	if err != nil {
		return errors.InvalidType("TotalRecords", "header", "uint64", response.GetHeader("TotalRecords"))
	}
	o.TotalRecords = totalRecords

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactListerBadRequest creates a ArtifactListerBadRequest with default headers values
func NewArtifactListerBadRequest() *ArtifactListerBadRequest {
	return &ArtifactListerBadRequest{}
}

/*ArtifactListerBadRequest handles this case with default header values.

Bad Request
*/
type ArtifactListerBadRequest struct {
	Payload *weles.ErrResponse
}

func (o *ArtifactListerBadRequest) Error() string {
	return fmt.Sprintf("[POST /artifacts/list][%d] artifactListerBadRequest  %+v", 400, o.Payload)
}

func (o *ArtifactListerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactListerNotFound creates a ArtifactListerNotFound with default headers values
func NewArtifactListerNotFound() *ArtifactListerNotFound {
	return &ArtifactListerNotFound{}
}

/*ArtifactListerNotFound handles this case with default header values.

Not Found
*/
type ArtifactListerNotFound struct {
	Payload *weles.ErrResponse
}

func (o *ArtifactListerNotFound) Error() string {
	return fmt.Sprintf("[POST /artifacts/list][%d] artifactListerNotFound  %+v", 404, o.Payload)
}

func (o *ArtifactListerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactListerInternalServerError creates a ArtifactListerInternalServerError with default headers values
func NewArtifactListerInternalServerError() *ArtifactListerInternalServerError {
	return &ArtifactListerInternalServerError{}
}

/*ArtifactListerInternalServerError handles this case with default header values.

Internal Server error
*/
type ArtifactListerInternalServerError struct {
	Payload *weles.ErrResponse
}

func (o *ArtifactListerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /artifacts/list][%d] artifactListerInternalServerError  %+v", 500, o.Payload)
}

func (o *ArtifactListerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ArtifactListerBody Data for filtering and sorting Weles Jobs lists.
swagger:model ArtifactListerBody
*/
type ArtifactListerBody struct {

	// filter
	Filter *weles.ArtifactFilter `json:"Filter,omitempty"`

	// sorter
	Sorter *weles.ArtifactSorter `json:"Sorter,omitempty"`
}

// Validate validates this artifact lister body
func (o *ArtifactListerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSorter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ArtifactListerBody) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(o.Filter) { // not required
		return nil
	}

	if o.Filter != nil {
		if err := o.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactFilterAndSort" + "." + "Filter")
			}
			return err
		}
	}

	return nil
}

func (o *ArtifactListerBody) validateSorter(formats strfmt.Registry) error {

	if swag.IsZero(o.Sorter) { // not required
		return nil
	}

	if o.Sorter != nil {
		if err := o.Sorter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactFilterAndSort" + "." + "Sorter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ArtifactListerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ArtifactListerBody) UnmarshalBinary(b []byte) error {
	var res ArtifactListerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
