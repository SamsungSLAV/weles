// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	weles "github.com/SamsungSLAV/weles"
)

// VersionReader is a Reader for the Version structure.
type VersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 500:
		result := NewVersionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewVersionOK creates a VersionOK with default headers values
func NewVersionOK() *VersionOK {
	return &VersionOK{}
}

/*VersionOK handles this case with default header values.

OK
*/
type VersionOK struct {
	/*State of Weles API.
	 */
	WelesAPIState string
	/*Version of Weles API.
	 */
	WelesAPIVersion string
	/*Version of Weles server.
	 */
	WelesServerVersion string

	Payload *weles.Version
}

func (o *VersionOK) Error() string {
	return fmt.Sprintf("[GET /version][%d] versionOK  %+v", 200, o.Payload)
}

func (o *VersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Weles-API-State
	o.WelesAPIState = response.GetHeader("Weles-API-State")

	// response header Weles-API-Version
	o.WelesAPIVersion = response.GetHeader("Weles-API-Version")

	// response header Weles-Server-Version
	o.WelesServerVersion = response.GetHeader("Weles-Server-Version")

	o.Payload = new(weles.Version)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVersionInternalServerError creates a VersionInternalServerError with default headers values
func NewVersionInternalServerError() *VersionInternalServerError {
	return &VersionInternalServerError{}
}

/*VersionInternalServerError handles this case with default header values.

Internal Server error
*/
type VersionInternalServerError struct {
	Payload *weles.ErrResponse
}

func (o *VersionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /version][%d] versionInternalServerError  %+v", 500, o.Payload)
}

func (o *VersionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(weles.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
