// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package enums

// This file was generated by the swagger tool and edited to enable validation of empty value.
// This type is used when generating swagger models.

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SortOrder denotes direction of sorting of weles jobs or artifacts.
//
// * Ascending - from oldest to newest.
//
// * Descending - from newest to oldest.
//
// swagger:model SortOrder
type SortOrder string

const (

	// SortOrderAscending captures enum value "Ascending"
	SortOrderAscending SortOrder = "Ascending"

	// SortOrderDescending captures enum value "Descending"
	SortOrderDescending SortOrder = "Descending"
)

// for schema
var sortOrderEnum []interface{}

func init() {
	var res []SortOrder
	if err := json.Unmarshal([]byte(`["Ascending","Descending",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sortOrderEnum = append(sortOrderEnum, v)
	}
}

func (m SortOrder) validateSortOrderEnum(path, location string, value SortOrder) error {
	if err := validate.Enum(path, location, value, sortOrderEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this sort order
func (m SortOrder) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSortOrderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
