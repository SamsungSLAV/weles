// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package enums

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// JobStatus specifies state of the Job.
//
// * NEW - The new Job has been created.
//
// * PARSING - Provided yaml file is being parsed and interpreted.
//
// * DOWNLOADING - Images and/or files required for the test are being downloaded.
//
// * WAITING - Job is waiting for Boruta worker.
//
// * RUNNING - Job is being executed.
//
// * COMPLETED - Job is completed. This is terminal state.
//
// * FAILED - Job execution has failed. This is terminal state.
//
// * CANCELED -Job has been canceled with API call. This is terminal state.
//
// swagger:model JobStatus
type JobStatus string

const (

	// JobStatusNEW captures enum value "NEW"
	JobStatusNEW JobStatus = "NEW"

	// JobStatusPARSING captures enum value "PARSING"
	JobStatusPARSING JobStatus = "PARSING"

	// JobStatusDOWNLOADING captures enum value "DOWNLOADING"
	JobStatusDOWNLOADING JobStatus = "DOWNLOADING"

	// JobStatusWAITING captures enum value "WAITING"
	JobStatusWAITING JobStatus = "WAITING"

	// JobStatusRUNNING captures enum value "RUNNING"
	JobStatusRUNNING JobStatus = "RUNNING"

	// JobStatusCOMPLETED captures enum value "COMPLETED"
	JobStatusCOMPLETED JobStatus = "COMPLETED"

	// JobStatusFAILED captures enum value "FAILED"
	JobStatusFAILED JobStatus = "FAILED"

	// JobStatusCANCELED captures enum value "CANCELED"
	JobStatusCANCELED JobStatus = "CANCELED"
)

// for schema
var jobStatusEnum []interface{}

func init() {
	var res []JobStatus
	if err := json.Unmarshal([]byte(`["NEW","PARSING","DOWNLOADING","WAITING","RUNNING","COMPLETED","FAILED","CANCELED",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobStatusEnum = append(jobStatusEnum, v)
	}
}

func (m JobStatus) validateJobStatusEnum(path, location string, value JobStatus) error {
	if err := validate.Enum(path, location, value, jobStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this job status
func (m JobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateJobStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ToInt converts JobStatus to int.
func (status JobStatus) ToInt() int {
	switch status {
	case JobStatusNEW:
		return 1
	case JobStatusPARSING:
		return 2
	case JobStatusDOWNLOADING:
		return 3
	case JobStatusWAITING:
		return 4
	case JobStatusRUNNING:
		return 5
	case JobStatusCOMPLETED:
		return 6
	case JobStatusFAILED:
		return 7
	case JobStatusCANCELED:
		return 8
	default:
		return -1
	}
}
