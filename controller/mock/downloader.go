// Code generated by MockGen. DO NOT EDIT.
// Source: git.tizen.org/tools/weles/controller (interfaces: Downloader)

// Package mock is a generated GoMock package.
package mock

import (
	weles "git.tizen.org/tools/weles"
	notifier "git.tizen.org/tools/weles/controller/notifier"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDownloader is a mock of Downloader interface
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// DispatchDownloads mocks base method
func (m *MockDownloader) DispatchDownloads(arg0 weles.JobID) {
	m.ctrl.Call(m, "DispatchDownloads", arg0)
}

// DispatchDownloads indicates an expected call of DispatchDownloads
func (mr *MockDownloaderMockRecorder) DispatchDownloads(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispatchDownloads", reflect.TypeOf((*MockDownloader)(nil).DispatchDownloads), arg0)
}

// Listen mocks base method
func (m *MockDownloader) Listen() <-chan notifier.Notification {
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(<-chan notifier.Notification)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockDownloaderMockRecorder) Listen() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockDownloader)(nil).Listen))
}

// SendFail mocks base method
func (m *MockDownloader) SendFail(arg0 weles.JobID, arg1 string) {
	m.ctrl.Call(m, "SendFail", arg0, arg1)
}

// SendFail indicates an expected call of SendFail
func (mr *MockDownloaderMockRecorder) SendFail(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFail", reflect.TypeOf((*MockDownloader)(nil).SendFail), arg0, arg1)
}

// SendOK mocks base method
func (m *MockDownloader) SendOK(arg0 weles.JobID) {
	m.ctrl.Call(m, "SendOK", arg0)
}

// SendOK indicates an expected call of SendOK
func (mr *MockDownloaderMockRecorder) SendOK(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOK", reflect.TypeOf((*MockDownloader)(nil).SendOK), arg0)
}
