// Code generated by MockGen. DO NOT EDIT.
// Source: git.tizen.org/tools/weles/controller (interfaces: Boruter)

// Package mock is a generated GoMock package.
package mock

import (
	weles "git.tizen.org/tools/weles"
	notifier "git.tizen.org/tools/weles/controller/notifier"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBoruter is a mock of Boruter interface
type MockBoruter struct {
	ctrl     *gomock.Controller
	recorder *MockBoruterMockRecorder
}

// MockBoruterMockRecorder is the mock recorder for MockBoruter
type MockBoruterMockRecorder struct {
	mock *MockBoruter
}

// NewMockBoruter creates a new mock instance
func NewMockBoruter(ctrl *gomock.Controller) *MockBoruter {
	mock := &MockBoruter{ctrl: ctrl}
	mock.recorder = &MockBoruterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoruter) EXPECT() *MockBoruterMockRecorder {
	return m.recorder
}

// Listen mocks base method
func (m *MockBoruter) Listen() <-chan notifier.Notification {
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(<-chan notifier.Notification)
	return ret0
}

// Listen indicates an expected call of Listen
func (mr *MockBoruterMockRecorder) Listen() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockBoruter)(nil).Listen))
}

// Release mocks base method
func (m *MockBoruter) Release(arg0 weles.JobID) {
	m.ctrl.Call(m, "Release", arg0)
}

// Release indicates an expected call of Release
func (mr *MockBoruterMockRecorder) Release(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockBoruter)(nil).Release), arg0)
}

// Request mocks base method
func (m *MockBoruter) Request(arg0 weles.JobID) {
	m.ctrl.Call(m, "Request", arg0)
}

// Request indicates an expected call of Request
func (mr *MockBoruterMockRecorder) Request(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockBoruter)(nil).Request), arg0)
}

// SendFail mocks base method
func (m *MockBoruter) SendFail(arg0 weles.JobID, arg1 string) {
	m.ctrl.Call(m, "SendFail", arg0, arg1)
}

// SendFail indicates an expected call of SendFail
func (mr *MockBoruterMockRecorder) SendFail(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFail", reflect.TypeOf((*MockBoruter)(nil).SendFail), arg0, arg1)
}

// SendOK mocks base method
func (m *MockBoruter) SendOK(arg0 weles.JobID) {
	m.ctrl.Call(m, "SendOK", arg0)
}

// SendOK indicates an expected call of SendOK
func (mr *MockBoruterMockRecorder) SendOK(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOK", reflect.TypeOf((*MockBoruter)(nil).SendOK), arg0)
}
