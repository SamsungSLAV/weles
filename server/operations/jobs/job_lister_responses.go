// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	weles "github.com/SamsungSLAV/weles"
)

// JobListerOKCode is the HTTP code returned for type JobListerOK
const JobListerOKCode int = 200

/*JobListerOK OK

swagger:response jobListerOK
*/
type JobListerOK struct {
	/*URL suffix to request next page of data. Please note that the same body must be used as in initial request.


	 */
	Next string `json:"Next"`
	/*URL suffix to request previous page of data. Please note that the same body must be used as in initial request.


	 */
	Previous string `json:"Previous"`
	/*count of records currently fulfilling the requested JobFilter. Please note that this value may change when requesting for the same data at a different moments in time.


	 */
	TotalRecords uint64 `json:"TotalRecords"`

	/*
	  In: Body
	*/
	Payload []*weles.JobInfo `json:"body,omitempty"`
}

// NewJobListerOK creates JobListerOK with default headers values
func NewJobListerOK() *JobListerOK {

	return &JobListerOK{}
}

// WithNext adds the next to the job lister o k response
func (o *JobListerOK) WithNext(next string) *JobListerOK {
	o.Next = next
	return o
}

// SetNext sets the next to the job lister o k response
func (o *JobListerOK) SetNext(next string) {
	o.Next = next
}

// WithPrevious adds the previous to the job lister o k response
func (o *JobListerOK) WithPrevious(previous string) *JobListerOK {
	o.Previous = previous
	return o
}

// SetPrevious sets the previous to the job lister o k response
func (o *JobListerOK) SetPrevious(previous string) {
	o.Previous = previous
}

// WithTotalRecords adds the totalRecords to the job lister o k response
func (o *JobListerOK) WithTotalRecords(totalRecords uint64) *JobListerOK {
	o.TotalRecords = totalRecords
	return o
}

// SetTotalRecords sets the totalRecords to the job lister o k response
func (o *JobListerOK) SetTotalRecords(totalRecords uint64) {
	o.TotalRecords = totalRecords
}

// WithPayload adds the payload to the job lister o k response
func (o *JobListerOK) WithPayload(payload []*weles.JobInfo) *JobListerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the job lister o k response
func (o *JobListerOK) SetPayload(payload []*weles.JobInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *JobListerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Next

	next := o.Next
	if next != "" {
		rw.Header().Set("Next", next)
	}

	// response header Previous

	previous := o.Previous
	if previous != "" {
		rw.Header().Set("Previous", previous)
	}

	// response header TotalRecords

	totalRecords := swag.FormatUint64(o.TotalRecords)
	if totalRecords != "" {
		rw.Header().Set("TotalRecords", totalRecords)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*weles.JobInfo, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// JobListerPartialContentCode is the HTTP code returned for type JobListerPartialContent
const JobListerPartialContentCode int = 206

/*JobListerPartialContent Partial Content

swagger:response jobListerPartialContent
*/
type JobListerPartialContent struct {
	/*URL suffix to request next page of data. Please note that the same body must be used as in initial request.


	 */
	Next string `json:"Next"`
	/*URL suffix to request previous page of data. Please note that the same body must be used as in initial request.


	 */
	Previous string `json:"Previous"`
	/*number of records after current page. Please note that this value may change when requesting for the same data at a different moments in time.


	 */
	RemainingRecords uint64 `json:"RemainingRecords"`
	/*count of records currently fulfilling requested JobFilter. Please note that this value may change when requesting for the same data at a different moments in time.


	 */
	TotalRecords uint64 `json:"TotalRecords"`

	/*
	  In: Body
	*/
	Payload []*weles.JobInfo `json:"body,omitempty"`
}

// NewJobListerPartialContent creates JobListerPartialContent with default headers values
func NewJobListerPartialContent() *JobListerPartialContent {

	return &JobListerPartialContent{}
}

// WithNext adds the next to the job lister partial content response
func (o *JobListerPartialContent) WithNext(next string) *JobListerPartialContent {
	o.Next = next
	return o
}

// SetNext sets the next to the job lister partial content response
func (o *JobListerPartialContent) SetNext(next string) {
	o.Next = next
}

// WithPrevious adds the previous to the job lister partial content response
func (o *JobListerPartialContent) WithPrevious(previous string) *JobListerPartialContent {
	o.Previous = previous
	return o
}

// SetPrevious sets the previous to the job lister partial content response
func (o *JobListerPartialContent) SetPrevious(previous string) {
	o.Previous = previous
}

// WithRemainingRecords adds the remainingRecords to the job lister partial content response
func (o *JobListerPartialContent) WithRemainingRecords(remainingRecords uint64) *JobListerPartialContent {
	o.RemainingRecords = remainingRecords
	return o
}

// SetRemainingRecords sets the remainingRecords to the job lister partial content response
func (o *JobListerPartialContent) SetRemainingRecords(remainingRecords uint64) {
	o.RemainingRecords = remainingRecords
}

// WithTotalRecords adds the totalRecords to the job lister partial content response
func (o *JobListerPartialContent) WithTotalRecords(totalRecords uint64) *JobListerPartialContent {
	o.TotalRecords = totalRecords
	return o
}

// SetTotalRecords sets the totalRecords to the job lister partial content response
func (o *JobListerPartialContent) SetTotalRecords(totalRecords uint64) {
	o.TotalRecords = totalRecords
}

// WithPayload adds the payload to the job lister partial content response
func (o *JobListerPartialContent) WithPayload(payload []*weles.JobInfo) *JobListerPartialContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the job lister partial content response
func (o *JobListerPartialContent) SetPayload(payload []*weles.JobInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *JobListerPartialContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Next

	next := o.Next
	if next != "" {
		rw.Header().Set("Next", next)
	}

	// response header Previous

	previous := o.Previous
	if previous != "" {
		rw.Header().Set("Previous", previous)
	}

	// response header RemainingRecords

	remainingRecords := swag.FormatUint64(o.RemainingRecords)
	if remainingRecords != "" {
		rw.Header().Set("RemainingRecords", remainingRecords)
	}

	// response header TotalRecords

	totalRecords := swag.FormatUint64(o.TotalRecords)
	if totalRecords != "" {
		rw.Header().Set("TotalRecords", totalRecords)
	}

	rw.WriteHeader(206)
	payload := o.Payload
	if payload == nil {
		payload = make([]*weles.JobInfo, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// JobListerBadRequestCode is the HTTP code returned for type JobListerBadRequest
const JobListerBadRequestCode int = 400

/*JobListerBadRequest Bad Request

swagger:response jobListerBadRequest
*/
type JobListerBadRequest struct {

	/*
	  In: Body
	*/
	Payload *weles.ErrResponse `json:"body,omitempty"`
}

// NewJobListerBadRequest creates JobListerBadRequest with default headers values
func NewJobListerBadRequest() *JobListerBadRequest {

	return &JobListerBadRequest{}
}

// WithPayload adds the payload to the job lister bad request response
func (o *JobListerBadRequest) WithPayload(payload *weles.ErrResponse) *JobListerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the job lister bad request response
func (o *JobListerBadRequest) SetPayload(payload *weles.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *JobListerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// JobListerNotFoundCode is the HTTP code returned for type JobListerNotFound
const JobListerNotFoundCode int = 404

/*JobListerNotFound Not Found

swagger:response jobListerNotFound
*/
type JobListerNotFound struct {

	/*
	  In: Body
	*/
	Payload *weles.ErrResponse `json:"body,omitempty"`
}

// NewJobListerNotFound creates JobListerNotFound with default headers values
func NewJobListerNotFound() *JobListerNotFound {

	return &JobListerNotFound{}
}

// WithPayload adds the payload to the job lister not found response
func (o *JobListerNotFound) WithPayload(payload *weles.ErrResponse) *JobListerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the job lister not found response
func (o *JobListerNotFound) SetPayload(payload *weles.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *JobListerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// JobListerInternalServerErrorCode is the HTTP code returned for type JobListerInternalServerError
const JobListerInternalServerErrorCode int = 500

/*JobListerInternalServerError Internal Server error

swagger:response jobListerInternalServerError
*/
type JobListerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *weles.ErrResponse `json:"body,omitempty"`
}

// NewJobListerInternalServerError creates JobListerInternalServerError with default headers values
func NewJobListerInternalServerError() *JobListerInternalServerError {

	return &JobListerInternalServerError{}
}

// WithPayload adds the payload to the job lister internal server error response
func (o *JobListerInternalServerError) WithPayload(payload *weles.ErrResponse) *JobListerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the job lister internal server error response
func (o *JobListerInternalServerError) SetPayload(payload *weles.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *JobListerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
