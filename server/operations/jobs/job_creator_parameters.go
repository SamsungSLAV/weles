// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
)

// NewJobCreatorParams creates a new JobCreatorParams object
// no default values defined in spec.
func NewJobCreatorParams() JobCreatorParams {

	return JobCreatorParams{}
}

// JobCreatorParams contains all the bound params for the job creator operation
// typically these are obtained from a http.Request
//
// swagger:parameters JobCreator
type JobCreatorParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*is Job description yaml file.
	  Required: true
	  In: formData
	*/
	Yamlfile io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewJobCreatorParams() beforehand.
func (o *JobCreatorParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	yamlfile, yamlfileHeader, err := r.FormFile("yamlfile")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "yamlfile", err))
	} else if err := o.bindYamlfile(yamlfile, yamlfileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.Yamlfile = &runtime.File{Data: yamlfile, Header: yamlfileHeader}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindYamlfile binds file parameter Yamlfile.
//
// The only supported validations on files are MinLength and MaxLength
func (o *JobCreatorParams) bindYamlfile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
