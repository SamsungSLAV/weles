// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package artifacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	weles "github.com/SamsungSLAV/weles"
)

// ArtifactListerHandlerFunc turns a function with the right signature into a artifact lister handler
type ArtifactListerHandlerFunc func(ArtifactListerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ArtifactListerHandlerFunc) Handle(params ArtifactListerParams) middleware.Responder {
	return fn(params)
}

// ArtifactListerHandler interface for that can handle valid artifact lister params
type ArtifactListerHandler interface {
	Handle(ArtifactListerParams) middleware.Responder
}

// NewArtifactLister creates a new http.Handler for the artifact lister operation
func NewArtifactLister(ctx *middleware.Context, handler ArtifactListerHandler) *ArtifactLister {
	return &ArtifactLister{Context: ctx, Handler: handler}
}

/*ArtifactLister swagger:route POST /artifacts/list artifacts artifactLister

List Artifacts with filter and sort features.

Returns sorted list of Artifacts. If there are more records than
default page size - 206 response is returned. If the page is last -
200 response is returned. If no Artifact passes filter - 404 response
is returned.

Providing empty body and no query parameter will result in list with
default values - no filter, sorted in Ascending order by ID.
Check ArtifactFilter and ArtifactSorter models documentation to see how
to use them.
To ease automatic pagination, URL suffixes are returned with each
2xx response.

*/
type ArtifactLister struct {
	Context *middleware.Context
	Handler ArtifactListerHandler
}

func (o *ArtifactLister) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewArtifactListerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ArtifactListerBody ArtifactFilterAndSort contains data for filtering and sorting
// Weles Artifacts lists. Please refer to ArtifactFilter and
// ArtifactSorter documentation for more details.
// swagger:model ArtifactListerBody
type ArtifactListerBody struct {

	// filter
	Filter *weles.ArtifactFilter `json:"Filter,omitempty"`

	// paginator
	Paginator *weles.ArtifactPaginator `json:"Paginator,omitempty"`

	// sorter
	Sorter *weles.ArtifactSorter `json:"Sorter,omitempty"`
}

// Validate validates this artifact lister body
func (o *ArtifactListerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePaginator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSorter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ArtifactListerBody) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(o.Filter) { // not required
		return nil
	}

	if o.Filter != nil {
		if err := o.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactListBody" + "." + "Filter")
			}
			return err
		}
	}

	return nil
}

func (o *ArtifactListerBody) validatePaginator(formats strfmt.Registry) error {

	if swag.IsZero(o.Paginator) { // not required
		return nil
	}

	if o.Paginator != nil {
		if err := o.Paginator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactListBody" + "." + "Paginator")
			}
			return err
		}
	}

	return nil
}

func (o *ArtifactListerBody) validateSorter(formats strfmt.Registry) error {

	if swag.IsZero(o.Sorter) { // not required
		return nil
	}

	if o.Sorter != nil {
		if err := o.Sorter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ArtifactListBody" + "." + "Sorter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ArtifactListerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ArtifactListerBody) UnmarshalBinary(b []byte) error {
	var res ArtifactListerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
