// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TbdHandlerFunc turns a function with the right signature into a tbd handler
type TbdHandlerFunc func(TbdParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TbdHandlerFunc) Handle(params TbdParams) middleware.Responder {
	return fn(params)
}

// TbdHandler interface for that can handle valid tbd params
type TbdHandler interface {
	Handle(TbdParams) middleware.Responder
}

// NewTbd creates a new http.Handler for the tbd operation
func NewTbd(ctx *middleware.Context, handler TbdHandler) *Tbd {
	return &Tbd{Context: ctx, Handler: handler}
}

/*Tbd swagger:route GET / tbd

tbd

tbd

*/
type Tbd struct {
	Context *middleware.Context
	Handler TbdHandler
}

func (o *Tbd) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTbdParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
