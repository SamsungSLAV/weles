// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package general

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	weles "github.com/SamsungSLAV/weles"
)

// VersionOKCode is the HTTP code returned for type VersionOK
const VersionOKCode int = 200

/*VersionOK OK

swagger:response versionOK
*/
type VersionOK struct {
	/*State of Weles API.

	 */
	WelesAPIState string `json:"Weles-Api-State"`
	/*Version of Weles API.

	 */
	WelesAPIVersion string `json:"Weles-Api-Version"`
	/*Version of Weles server.

	 */
	WelesServerVersion string `json:"Weles-Server-Version"`

	/*
	  In: Body
	*/
	Payload *weles.Version `json:"body,omitempty"`
}

// NewVersionOK creates VersionOK with default headers values
func NewVersionOK() *VersionOK {

	return &VersionOK{}
}

// WithWelesAPIState adds the welesApiState to the version o k response
func (o *VersionOK) WithWelesAPIState(welesAPIState string) *VersionOK {
	o.WelesAPIState = welesAPIState
	return o
}

// SetWelesAPIState sets the welesApiState to the version o k response
func (o *VersionOK) SetWelesAPIState(welesAPIState string) {
	o.WelesAPIState = welesAPIState
}

// WithWelesAPIVersion adds the welesApiVersion to the version o k response
func (o *VersionOK) WithWelesAPIVersion(welesAPIVersion string) *VersionOK {
	o.WelesAPIVersion = welesAPIVersion
	return o
}

// SetWelesAPIVersion sets the welesApiVersion to the version o k response
func (o *VersionOK) SetWelesAPIVersion(welesAPIVersion string) {
	o.WelesAPIVersion = welesAPIVersion
}

// WithWelesServerVersion adds the welesServerVersion to the version o k response
func (o *VersionOK) WithWelesServerVersion(welesServerVersion string) *VersionOK {
	o.WelesServerVersion = welesServerVersion
	return o
}

// SetWelesServerVersion sets the welesServerVersion to the version o k response
func (o *VersionOK) SetWelesServerVersion(welesServerVersion string) {
	o.WelesServerVersion = welesServerVersion
}

// WithPayload adds the payload to the version o k response
func (o *VersionOK) WithPayload(payload *weles.Version) *VersionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version o k response
func (o *VersionOK) SetPayload(payload *weles.Version) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Weles-Api-State

	welesAPIState := o.WelesAPIState
	if welesAPIState != "" {
		rw.Header().Set("Weles-Api-State", welesAPIState)
	}

	// response header Weles-Api-Version

	welesAPIVersion := o.WelesAPIVersion
	if welesAPIVersion != "" {
		rw.Header().Set("Weles-Api-Version", welesAPIVersion)
	}

	// response header Weles-Server-Version

	welesServerVersion := o.WelesServerVersion
	if welesServerVersion != "" {
		rw.Header().Set("Weles-Server-Version", welesServerVersion)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VersionInternalServerErrorCode is the HTTP code returned for type VersionInternalServerError
const VersionInternalServerErrorCode int = 500

/*VersionInternalServerError Internal Server error

swagger:response versionInternalServerError
*/
type VersionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *weles.ErrResponse `json:"body,omitempty"`
}

// NewVersionInternalServerError creates VersionInternalServerError with default headers values
func NewVersionInternalServerError() *VersionInternalServerError {

	return &VersionInternalServerError{}
}

// WithPayload adds the payload to the version internal server error response
func (o *VersionInternalServerError) WithPayload(payload *weles.ErrResponse) *VersionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the version internal server error response
func (o *VersionInternalServerError) SetPayload(payload *weles.ErrResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VersionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
