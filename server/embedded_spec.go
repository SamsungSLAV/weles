// Code generated by go-swagger; DO NOT EDIT.

// Copyright (c) 2017-2018 Samsung Electronics Co., Ltd All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is an instance of Weles. [More about this instance of Weles.](http://weles.yourdomain.com).\n",
    "title": "Weles",
    "termsOfService": "http://weles.yourdomain.com/terms/",
    "contact": {
      "email": "admin@yourdomain.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v1"
  },
  "host": "localhost:5010",
  "basePath": "/api/v1",
  "paths": {
    "/artifacts/list": {
      "post": {
        "description": "Returns sorted list of Artifacts. If there are more records than default page size -  206 response is returned. If the page is last - 200 response is returned. If no Artifact passes filter - 404 response is returned.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "artifacts"
        ],
        "summary": "List Artifacts with filter and sort features",
        "operationId": "ArtifactLister",
        "parameters": [
          {
            "description": "Artifact Filter and Sort object.",
            "name": "artifactFilterAndSort",
            "in": "body",
            "schema": {
              "description": "Data for filtering and sorting Weles Jobs lists.",
              "type": "object",
              "properties": {
                "Filter": {
                  "$ref": "#/definitions/ArtifactFilter"
                },
                "Sorter": {
                  "$ref": "#/definitions/ArtifactSorter"
                }
              }
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Fill this parameter with ID (not JobID) of the last element from current page to receive next one.\n",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Fill this parameter with ID (not JobID) of first element from current page to receive previous one.\n",
            "name": "before",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return. Overrides default server page limit.\n",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArtifactInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URI to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling the requested ArtifactFilter. Please note that this value may change when requesting for the same data at a different moment in time.\n"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArtifactInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URI to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URI to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "RemainingRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "number of records after current page. Please note that this value may change when requesting for the same data at a different moment in time.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling the requested ArtifactFilter. Please note that this value may change when requesting for the same data at a different moment in time.\n"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServer"
          }
        }
      }
    },
    "/jobs": {
      "post": {
        "description": "Add new Job to Weles. Job submission should be in YAML format. User will receive JobID number in response. Parsing the file and downloading Artifacts (if necessary) will be performed immidiately. Job will be executed when worker will be available. JobLister path should be used to query Weles for Job progress.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Add new Job",
        "operationId": "JobCreator",
        "parameters": [
          {
            "type": "file",
            "description": "is Job description yaml file.",
            "name": "yamlfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/JobID"
            }
          },
          "415": {
            "$ref": "#/responses/UnsupportedMediaType"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/InternalServer"
          }
        }
      }
    },
    "/jobs/list": {
      "post": {
        "description": "Returns sorted list of Jobs. If there are more records than returned page, 206 response is returned. If the page is last - 200 response is returned. If no Jobs satisfy passed filter, 404 response is returned.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs"
        ],
        "summary": "List Jobs with filtering, sorting and pagination.",
        "operationId": "JobLister",
        "parameters": [
          {
            "description": "Job Filter and Sort object.",
            "name": "jobFilterAndSort",
            "in": "body",
            "schema": {
              "description": "Data for filtering and sorting Weles Jobs lists.",
              "type": "object",
              "properties": {
                "Filter": {
                  "$ref": "#/definitions/JobFilter"
                },
                "Sorter": {
                  "$ref": "#/definitions/JobSorter"
                }
              }
            }
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "Fill this parameter with JobID of the last element from current page to receive next one.\n",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "Fill this parameter with JobID of the first element from current page to receive previous one.\n",
            "name": "before",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return. Overrides default server page limit.\n",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request previous page of data. Please note that the same body must be used as in initial request.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling the requested JobFilter. Please note that this value may change when requesting for the same data at a different moments in time.\n"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request previous page of data. Please note that the same body must be used as in initial request.\n"
              },
              "RemainingRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "number of records after current page. Please note that this value may change when requesting for the same data at a different moments in time.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling requested JobFilter. Please note that this value may change when requesting for the same data at a different moments in time.\n"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServer"
          }
        }
      }
    },
    "/jobs/{JobID}/cancel": {
      "post": {
        "description": "Stop execution of Job identified by JobID. Returns 204 on success. If Job does not exist, 404 response will be returned. If the Job is already in final state, 403 response will be returned.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Cancel a Job",
        "operationId": "JobCanceler",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "name": "JobID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/InternalServer"
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "Version and state of API (e.g. v1 obsolete, v2 stable, v3 devel) and server version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "general"
        ],
        "summary": "Show current version of Weles internals",
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Version"
            },
            "headers": {
              "Weles-API-State": {
                "type": "string",
                "description": "State of Weles API."
              },
              "Weles-API-Version": {
                "type": "string",
                "description": "Version of Weles API."
              },
              "Weles-Server-Version": {
                "type": "string",
                "description": "Version of Weles server."
              }
            }
          },
          "500": {
            "$ref": "#/responses/InternalServer"
          }
        }
      }
    }
  },
  "definitions": {
    "ArtifactAlias": {
      "description": "is an alternative name of an Artifact.",
      "type": "string"
    },
    "ArtifactDescription": {
      "description": "contains information needed to create new Artifact in ArtifactDB.",
      "type": "object",
      "properties": {
        "Alias": {
          "$ref": "#/definitions/ArtifactAlias"
        },
        "JobID": {
          "description": "specifies  Job for which Artifact was created.",
          "$ref": "#/definitions/JobID"
        },
        "Type": {
          "$ref": "#/definitions/ArtifactType"
        },
        "URI": {
          "$ref": "#/definitions/ArtifactURI"
        }
      }
    },
    "ArtifactFilter": {
      "description": "is used to filter results from ArtifactDB.",
      "type": "object",
      "properties": {
        "Alias": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactAlias"
          }
        },
        "JobID": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobID"
          }
        },
        "Status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactStatus"
          }
        },
        "Type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactType"
          }
        }
      }
    },
    "ArtifactInfo": {
      "description": "describes single artifact stored in ArtifactDB.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDescription"
        }
      ],
      "properties": {
        "ID": {
          "description": "unique identification of the artifact.",
          "type": "integer",
          "format": "int64",
          "x-go-custom-tag": "db:\",primarykey, autoincrement\""
        },
        "Path": {
          "$ref": "#/definitions/ArtifactPath"
        },
        "Status": {
          "$ref": "#/definitions/ArtifactStatus"
        },
        "Timestamp": {
          "description": "is date of creating the artifact.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ArtifactPath": {
      "description": "describes path to Artifact in ArtifactDB filesystem.",
      "type": "string"
    },
    "ArtifactSortBy": {
      "description": "denotes the key for sorting list of all artifacts.\n* ID - sorting by artifact ID.\n",
      "type": "string",
      "enum": [
        "ID"
      ]
    },
    "ArtifactSorter": {
      "description": "defines the key for sorting as well as direction of sorting.\nWhen ArtifactSorter is empty, Artifacts are sorted by ID, Ascending.\n",
      "type": "object",
      "properties": {
        "By": {
          "$ref": "#/definitions/ArtifactSortBy"
        },
        "Order": {
          "$ref": "#/definitions/SortOrder"
        }
      }
    },
    "ArtifactStatus": {
      "description": "describes artifact status and availability.\n\n* DOWNLOADING - artifact is currently being downloaded.\n\n* READY - artifact has been downloaded and is ready to use.\n\n* FAILED - file is not available for use (e.g. download failed).\n\n* PENDING - artifact download has not started yet.\n",
      "type": "string",
      "enum": [
        "DOWNLOADING",
        "READY",
        "FAILED",
        "PENDING"
      ]
    },
    "ArtifactType": {
      "description": "denotes type and function of an Artifact.\n\n* IMAGE - image file.\n\n* RESULT - all outputs, files built during tests, etc.\n\n* TEST - additional files uploaded by user for conducting test.\n\n* YAML - yaml file describing Weles Job.\n",
      "type": "string",
      "enum": [
        "IMAGE",
        "RESULT",
        "TEST",
        "YAML"
      ]
    },
    "ArtifactURI": {
      "description": "is used to identify Artifact's source.",
      "type": "string",
      "format": "uri"
    },
    "ErrResponse": {
      "description": "is a standard error response containing information about the error. It consists of error type and message.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "JobFilter": {
      "description": "is used to filter Weles Jobs. Filling more than one struct member (e.g. JobID, Name) will result in searching for a Job with filled JobID and Name. Filling more than one member of an array/slice (in specific struct member) will result in searching for all members of array. Both aforementioned behaviours may occur simultainously. Some JobFilter fields support regular expressions (see documentation of struct)\n",
      "type": "object",
      "properties": {
        "CreatedAfter": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedBefore": {
          "type": "string",
          "format": "date-time"
        },
        "Info": {
          "description": "Allows usage of regular expressions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "JobID": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobID"
          }
        },
        "Name": {
          "description": "Allows usage of regular expressions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobStatus"
          }
        },
        "UpdatedAfter": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedBefore": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "JobID": {
      "description": "is a unique identifier for Weles Job.",
      "type": "integer",
      "format": "uint64"
    },
    "JobInfo": {
      "description": "contains information about a Job available for public API.",
      "type": "object",
      "properties": {
        "created": {
          "description": "is the Job creation time in UTC.",
          "type": "string",
          "format": "date-time"
        },
        "info": {
          "description": "provides additional information about current state, e.g. cause of failure",
          "type": "string"
        },
        "jobID": {
          "description": "is a unique Job identifier",
          "$ref": "#/definitions/JobID"
        },
        "name": {
          "description": "is the Job name acquired from yaml file during Job creation.",
          "type": "string"
        },
        "status": {
          "description": "specifies current state of the Job.",
          "$ref": "#/definitions/JobStatus"
        },
        "updated": {
          "description": "is the time of latest Jobs' status modification.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "JobSortBy": {
      "description": "denotes key for sorting Jobs list.\n\n* ID - default sort key.\n\n* CreatedDate - sorting by date of creation of the weles Job.\n\n* UpdatedDate - sorting by date of update of the weles Job.\n\n* JobStatus - sorting by the Job Status. Descending order will sort in the order JobStatuses are listed in the docs (from NEW at the start to CANCELED at the end). Ascending will reverse this order.\n\nWhen sorting is applied, and there are many Jobs with the same date/status, they will be sorted by JobID (Ascending)\n",
      "type": "string",
      "enum": [
        "ID",
        "CreatedDate",
        "UpdatedDate",
        "JobStatus"
      ]
    },
    "JobSorter": {
      "description": "defines the key for sorting as well as direction of sorting.\n",
      "type": "object",
      "properties": {
        "By": {
          "$ref": "#/definitions/JobSortBy"
        },
        "Order": {
          "$ref": "#/definitions/SortOrder"
        }
      }
    },
    "JobStatus": {
      "description": "specifies state of the Job.\n\n* NEW - The new Job has been created.\n\n* PARSING - Provided yaml file is being parsed and interpreted.\n\n* DOWNLOADING - Images and/or files required for the test are being downloaded.\n\n* WAITING - Job is waiting for Boruta worker.\n\n* RUNNING - Job is being executed.\n\n* COMPLETED - Job is completed. This is terminal state.\n\n* FAILED - Job execution has failed. This is terminal state.\n\n* CANCELED -Job has been canceled with API call. This is terminal state.\n",
      "type": "string",
      "enum": [
        "NEW",
        "PARSING",
        "DOWNLOADING",
        "WAITING",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELED"
      ]
    },
    "SortOrder": {
      "description": "denotes direction of sorting of weles Jobs or Artifacts.\n\n* Ascending - from oldest to newest.\n\n* Descending - from newest to oldest.\n",
      "type": "string",
      "enum": [
        "Ascending",
        "Descending"
      ]
    },
    "Version": {
      "description": "defines version of Weles API (and its state) and server.\n",
      "type": "object",
      "properties": {
        "API": {
          "description": "Version of Weles API.",
          "type": "string"
        },
        "Server": {
          "description": "Version of Weles server.",
          "type": "string"
        },
        "State": {
          "description": "State of Weles API.",
          "type": "string",
          "enum": [
            "devel",
            "stable",
            "deprecated"
          ]
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "Forbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "InternalServer": {
      "description": "Internal Server error",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "NotFound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "UnprocessableEntity": {
      "description": "Unprocessable entity",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "UnsupportedMediaType": {
      "description": "Unsupported media type",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    }
  },
  "tags": [
    {
      "description": "Info and management of Weles Jobs.",
      "name": "jobs"
    },
    {
      "description": "Info about Artifacts used by Weles Jobs.",
      "name": "artifacts"
    },
    {
      "description": "Info about Weles (e.g. version)",
      "name": "general"
    }
  ],
  "externalDocs": {
    "description": "Official Weles documentation.",
    "url": "http://samsungslav.github.io/weles"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is an instance of Weles. [More about this instance of Weles.](http://weles.yourdomain.com).\n",
    "title": "Weles",
    "termsOfService": "http://weles.yourdomain.com/terms/",
    "contact": {
      "email": "admin@yourdomain.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v1"
  },
  "host": "localhost:5010",
  "basePath": "/api/v1",
  "paths": {
    "/artifacts/list": {
      "post": {
        "description": "Returns sorted list of Artifacts. If there are more records than default page size -  206 response is returned. If the page is last - 200 response is returned. If no Artifact passes filter - 404 response is returned.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "artifacts"
        ],
        "summary": "List Artifacts with filter and sort features",
        "operationId": "ArtifactLister",
        "parameters": [
          {
            "description": "Artifact Filter and Sort object.",
            "name": "artifactFilterAndSort",
            "in": "body",
            "schema": {
              "description": "Data for filtering and sorting Weles Jobs lists.",
              "type": "object",
              "properties": {
                "Filter": {
                  "$ref": "#/definitions/ArtifactFilter"
                },
                "Sorter": {
                  "$ref": "#/definitions/ArtifactSorter"
                }
              }
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Fill this parameter with ID (not JobID) of the last element from current page to receive next one.\n",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Fill this parameter with ID (not JobID) of first element from current page to receive previous one.\n",
            "name": "before",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return. Overrides default server page limit.\n",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArtifactInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URI to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling the requested ArtifactFilter. Please note that this value may change when requesting for the same data at a different moment in time.\n"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArtifactInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URI to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URI to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "RemainingRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "number of records after current page. Please note that this value may change when requesting for the same data at a different moment in time.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling the requested ArtifactFilter. Please note that this value may change when requesting for the same data at a different moment in time.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/jobs": {
      "post": {
        "description": "Add new Job to Weles. Job submission should be in YAML format. User will receive JobID number in response. Parsing the file and downloading Artifacts (if necessary) will be performed immidiately. Job will be executed when worker will be available. JobLister path should be used to query Weles for Job progress.\n",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Add new Job",
        "operationId": "JobCreator",
        "parameters": [
          {
            "type": "file",
            "description": "is Job description yaml file.",
            "name": "yamlfile",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/JobID"
            }
          },
          "415": {
            "description": "Unsupported media type",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/jobs/list": {
      "post": {
        "description": "Returns sorted list of Jobs. If there are more records than returned page, 206 response is returned. If the page is last - 200 response is returned. If no Jobs satisfy passed filter, 404 response is returned.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs"
        ],
        "summary": "List Jobs with filtering, sorting and pagination.",
        "operationId": "JobLister",
        "parameters": [
          {
            "description": "Job Filter and Sort object.",
            "name": "jobFilterAndSort",
            "in": "body",
            "schema": {
              "description": "Data for filtering and sorting Weles Jobs lists.",
              "type": "object",
              "properties": {
                "Filter": {
                  "$ref": "#/definitions/JobFilter"
                },
                "Sorter": {
                  "$ref": "#/definitions/JobSorter"
                }
              }
            }
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "Fill this parameter with JobID of the last element from current page to receive next one.\n",
            "name": "after",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "Fill this parameter with JobID of the first element from current page to receive previous one.\n",
            "name": "before",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of records to return. Overrides default server page limit.\n",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request previous page of data. Please note that the same body must be used as in initial request.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling the requested JobFilter. Please note that this value may change when requesting for the same data at a different moments in time.\n"
              }
            }
          },
          "206": {
            "description": "Partial Content",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobInfo"
              }
            },
            "headers": {
              "Next": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request next page of data. Please note that the same body must be used as in initial request.\n"
              },
              "Previous": {
                "type": "string",
                "format": "URI",
                "description": "URL suffix to request previous page of data. Please note that the same body must be used as in initial request.\n"
              },
              "RemainingRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "number of records after current page. Please note that this value may change when requesting for the same data at a different moments in time.\n"
              },
              "TotalRecords": {
                "type": "integer",
                "format": "uint64",
                "description": "count of records currently fulfilling requested JobFilter. Please note that this value may change when requesting for the same data at a different moments in time.\n"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/jobs/{JobID}/cancel": {
      "post": {
        "description": "Stop execution of Job identified by JobID. Returns 204 on success. If Job does not exist, 404 response will be returned. If the Job is already in final state, 403 response will be returned.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "jobs"
        ],
        "summary": "Cancel a Job",
        "operationId": "JobCanceler",
        "parameters": [
          {
            "type": "integer",
            "format": "uint64",
            "name": "JobID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "Version and state of API (e.g. v1 obsolete, v2 stable, v3 devel) and server version.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "general"
        ],
        "summary": "Show current version of Weles internals",
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Version"
            },
            "headers": {
              "Weles-API-State": {
                "type": "string",
                "description": "State of Weles API."
              },
              "Weles-API-Version": {
                "type": "string",
                "description": "Version of Weles API."
              },
              "Weles-Server-Version": {
                "type": "string",
                "description": "Version of Weles server."
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "schema": {
              "$ref": "#/definitions/ErrResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ArtifactAlias": {
      "description": "is an alternative name of an Artifact.",
      "type": "string"
    },
    "ArtifactDescription": {
      "description": "contains information needed to create new Artifact in ArtifactDB.",
      "type": "object",
      "properties": {
        "Alias": {
          "$ref": "#/definitions/ArtifactAlias"
        },
        "JobID": {
          "description": "specifies  Job for which Artifact was created.",
          "$ref": "#/definitions/JobID"
        },
        "Type": {
          "$ref": "#/definitions/ArtifactType"
        },
        "URI": {
          "$ref": "#/definitions/ArtifactURI"
        }
      }
    },
    "ArtifactFilter": {
      "description": "is used to filter results from ArtifactDB.",
      "type": "object",
      "properties": {
        "Alias": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactAlias"
          }
        },
        "JobID": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobID"
          }
        },
        "Status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactStatus"
          }
        },
        "Type": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArtifactType"
          }
        }
      }
    },
    "ArtifactInfo": {
      "description": "describes single artifact stored in ArtifactDB.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ArtifactDescription"
        }
      ],
      "properties": {
        "ID": {
          "description": "unique identification of the artifact.",
          "type": "integer",
          "format": "int64",
          "x-go-custom-tag": "db:\",primarykey, autoincrement\""
        },
        "Path": {
          "$ref": "#/definitions/ArtifactPath"
        },
        "Status": {
          "$ref": "#/definitions/ArtifactStatus"
        },
        "Timestamp": {
          "description": "is date of creating the artifact.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ArtifactPath": {
      "description": "describes path to Artifact in ArtifactDB filesystem.",
      "type": "string"
    },
    "ArtifactSortBy": {
      "description": "denotes the key for sorting list of all artifacts.\n* ID - sorting by artifact ID.\n",
      "type": "string",
      "enum": [
        "ID"
      ]
    },
    "ArtifactSorter": {
      "description": "defines the key for sorting as well as direction of sorting.\nWhen ArtifactSorter is empty, Artifacts are sorted by ID, Ascending.\n",
      "type": "object",
      "properties": {
        "By": {
          "$ref": "#/definitions/ArtifactSortBy"
        },
        "Order": {
          "$ref": "#/definitions/SortOrder"
        }
      }
    },
    "ArtifactStatus": {
      "description": "describes artifact status and availability.\n\n* DOWNLOADING - artifact is currently being downloaded.\n\n* READY - artifact has been downloaded and is ready to use.\n\n* FAILED - file is not available for use (e.g. download failed).\n\n* PENDING - artifact download has not started yet.\n",
      "type": "string",
      "enum": [
        "DOWNLOADING",
        "READY",
        "FAILED",
        "PENDING"
      ]
    },
    "ArtifactType": {
      "description": "denotes type and function of an Artifact.\n\n* IMAGE - image file.\n\n* RESULT - all outputs, files built during tests, etc.\n\n* TEST - additional files uploaded by user for conducting test.\n\n* YAML - yaml file describing Weles Job.\n",
      "type": "string",
      "enum": [
        "IMAGE",
        "RESULT",
        "TEST",
        "YAML"
      ]
    },
    "ArtifactURI": {
      "description": "is used to identify Artifact's source.",
      "type": "string",
      "format": "uri"
    },
    "ErrResponse": {
      "description": "is a standard error response containing information about the error. It consists of error type and message.",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "JobFilter": {
      "description": "is used to filter Weles Jobs. Filling more than one struct member (e.g. JobID, Name) will result in searching for a Job with filled JobID and Name. Filling more than one member of an array/slice (in specific struct member) will result in searching for all members of array. Both aforementioned behaviours may occur simultainously. Some JobFilter fields support regular expressions (see documentation of struct)\n",
      "type": "object",
      "properties": {
        "CreatedAfter": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedBefore": {
          "type": "string",
          "format": "date-time"
        },
        "Info": {
          "description": "Allows usage of regular expressions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "JobID": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobID"
          }
        },
        "Name": {
          "description": "Allows usage of regular expressions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Status": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobStatus"
          }
        },
        "UpdatedAfter": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedBefore": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "JobID": {
      "description": "is a unique identifier for Weles Job.",
      "type": "integer",
      "format": "uint64"
    },
    "JobInfo": {
      "description": "contains information about a Job available for public API.",
      "type": "object",
      "properties": {
        "created": {
          "description": "is the Job creation time in UTC.",
          "type": "string",
          "format": "date-time"
        },
        "info": {
          "description": "provides additional information about current state, e.g. cause of failure",
          "type": "string"
        },
        "jobID": {
          "description": "is a unique Job identifier",
          "$ref": "#/definitions/JobID"
        },
        "name": {
          "description": "is the Job name acquired from yaml file during Job creation.",
          "type": "string"
        },
        "status": {
          "description": "specifies current state of the Job.",
          "$ref": "#/definitions/JobStatus"
        },
        "updated": {
          "description": "is the time of latest Jobs' status modification.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "JobSortBy": {
      "description": "denotes key for sorting Jobs list.\n\n* ID - default sort key.\n\n* CreatedDate - sorting by date of creation of the weles Job.\n\n* UpdatedDate - sorting by date of update of the weles Job.\n\n* JobStatus - sorting by the Job Status. Descending order will sort in the order JobStatuses are listed in the docs (from NEW at the start to CANCELED at the end). Ascending will reverse this order.\n\nWhen sorting is applied, and there are many Jobs with the same date/status, they will be sorted by JobID (Ascending)\n",
      "type": "string",
      "enum": [
        "ID",
        "CreatedDate",
        "UpdatedDate",
        "JobStatus"
      ]
    },
    "JobSorter": {
      "description": "defines the key for sorting as well as direction of sorting.\n",
      "type": "object",
      "properties": {
        "By": {
          "$ref": "#/definitions/JobSortBy"
        },
        "Order": {
          "$ref": "#/definitions/SortOrder"
        }
      }
    },
    "JobStatus": {
      "description": "specifies state of the Job.\n\n* NEW - The new Job has been created.\n\n* PARSING - Provided yaml file is being parsed and interpreted.\n\n* DOWNLOADING - Images and/or files required for the test are being downloaded.\n\n* WAITING - Job is waiting for Boruta worker.\n\n* RUNNING - Job is being executed.\n\n* COMPLETED - Job is completed. This is terminal state.\n\n* FAILED - Job execution has failed. This is terminal state.\n\n* CANCELED -Job has been canceled with API call. This is terminal state.\n",
      "type": "string",
      "enum": [
        "NEW",
        "PARSING",
        "DOWNLOADING",
        "WAITING",
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELED"
      ]
    },
    "SortOrder": {
      "description": "denotes direction of sorting of weles Jobs or Artifacts.\n\n* Ascending - from oldest to newest.\n\n* Descending - from newest to oldest.\n",
      "type": "string",
      "enum": [
        "Ascending",
        "Descending"
      ]
    },
    "Version": {
      "description": "defines version of Weles API (and its state) and server.\n",
      "type": "object",
      "properties": {
        "API": {
          "description": "Version of Weles API.",
          "type": "string"
        },
        "Server": {
          "description": "Version of Weles server.",
          "type": "string"
        },
        "State": {
          "description": "State of Weles API.",
          "type": "string",
          "enum": [
            "devel",
            "stable",
            "deprecated"
          ]
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "Forbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "InternalServer": {
      "description": "Internal Server error",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "NotFound": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "UnprocessableEntity": {
      "description": "Unprocessable entity",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    },
    "UnsupportedMediaType": {
      "description": "Unsupported media type",
      "schema": {
        "$ref": "#/definitions/ErrResponse"
      }
    }
  },
  "tags": [
    {
      "description": "Info and management of Weles Jobs.",
      "name": "jobs"
    },
    {
      "description": "Info about Artifacts used by Weles Jobs.",
      "name": "artifacts"
    },
    {
      "description": "Info about Weles (e.g. version)",
      "name": "general"
    }
  ],
  "externalDocs": {
    "description": "Official Weles documentation.",
    "url": "http://samsungslav.github.io/weles"
  }
}`))
}
